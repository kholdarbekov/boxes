# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: db.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class RequestStatus(betterproto.Enum):
    OK = 0
    ERROR = 1


@dataclass(eq=False, repr=False)
class Box(betterproto.Message):
    name: str = betterproto.string_field(1)
    id: int = betterproto.int32_field(2)
    price: int = betterproto.int32_field(3)
    description: str = betterproto.string_field(4)
    category: str = betterproto.string_field(5)
    quantity: int = betterproto.int32_field(6)
    # If not sent upon creation then utcnow() will be used
    created_at: datetime = betterproto.message_field(7, optional=True)


@dataclass(eq=False, repr=False)
class GetBoxRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetBoxResponse(betterproto.Message):
    box: "Box" = betterproto.message_field(1)
    status: "RequestStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetAllBoxesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetBoxesResponse(betterproto.Message):
    box: List["Box"] = betterproto.message_field(1)
    status: "RequestStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CreateBoxRequest(betterproto.Message):
    box: "Box" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class UpdateBoxRequest(betterproto.Message):
    box: "Box" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class DeleteBoxRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DeleteBoxResponse(betterproto.Message):
    status: "RequestStatus" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetBoxesInCategoryRequest(betterproto.Message):
    category: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetBoxesInTimeRangeRequest(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    end_time: datetime = betterproto.message_field(2)


class DatabaseServiceStub(betterproto.ServiceStub):
    async def get_box(self, *, id: int = 0) -> "GetBoxResponse":

        request = GetBoxRequest()
        request.id = id

        return await self._unary_unary(
            "/db.DatabaseService/GetBox", request, GetBoxResponse
        )

    async def get_boxes(self) -> "GetBoxesResponse":

        request = GetAllBoxesRequest()

        return await self._unary_unary(
            "/db.DatabaseService/GetBoxes", request, GetBoxesResponse
        )

    async def create_box(self, *, box: "Box" = None) -> "CreateBoxResponse":

        request = CreateBoxRequest()
        if box is not None:
            request.box = box

        return await self._unary_unary(
            "/db.DatabaseService/CreateBox", request, CreateBoxResponse
        )

    async def update_box(self, *, box: "Box" = None) -> "UpdateBoxResponse":

        request = UpdateBoxRequest()
        if box is not None:
            request.box = box

        return await self._unary_unary(
            "/db.DatabaseService/UpdateBox", request, UpdateBoxResponse
        )

    async def delete_box(self, *, id: int = 0) -> "DeleteBoxResponse":

        request = DeleteBoxRequest()
        request.id = id

        return await self._unary_unary(
            "/db.DatabaseService/DeleteBox", request, DeleteBoxResponse
        )

    async def get_boxes_in_category(self, *, category: str = "") -> "GetBoxesResponse":

        request = GetBoxesInCategoryRequest()
        request.category = category

        return await self._unary_unary(
            "/db.DatabaseService/GetBoxesInCategory", request, GetBoxesResponse
        )

    async def get_boxes_in_time_range(
        self, *, start_time: datetime = None, end_time: datetime = None
    ) -> "GetBoxesResponse":

        request = GetBoxesInTimeRangeRequest()
        if start_time is not None:
            request.start_time = start_time
        if end_time is not None:
            request.end_time = end_time

        return await self._unary_unary(
            "/db.DatabaseService/GetBoxesInTimeRange", request, GetBoxesResponse
        )


class DatabaseServiceBase(ServiceBase):
    async def get_box(self, id: int) -> "GetBoxResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_boxes(self) -> "GetBoxesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_box(self, box: "Box") -> "CreateBoxResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_box(self, box: "Box") -> "UpdateBoxResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_box(self, id: int) -> "DeleteBoxResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_boxes_in_category(self, category: str) -> "GetBoxesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_boxes_in_time_range(
        self, start_time: datetime, end_time: datetime
    ) -> "GetBoxesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_box(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.get_box(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_boxes(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_boxes(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_create_box(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "box": request.box,
        }

        response = await self.create_box(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update_box(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "box": request.box,
        }

        response = await self.update_box(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_box(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.delete_box(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_boxes_in_category(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "category": request.category,
        }

        response = await self.get_boxes_in_category(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_boxes_in_time_range(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "start_time": request.start_time,
            "end_time": request.end_time,
        }

        response = await self.get_boxes_in_time_range(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/db.DatabaseService/GetBox": grpclib.const.Handler(
                self.__rpc_get_box,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBoxRequest,
                GetBoxResponse,
            ),
            "/db.DatabaseService/GetBoxes": grpclib.const.Handler(
                self.__rpc_get_boxes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAllBoxesRequest,
                GetBoxesResponse,
            ),
            "/db.DatabaseService/CreateBox": grpclib.const.Handler(
                self.__rpc_create_box,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateBoxRequest,
                CreateBoxResponse,
            ),
            "/db.DatabaseService/UpdateBox": grpclib.const.Handler(
                self.__rpc_update_box,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateBoxRequest,
                UpdateBoxResponse,
            ),
            "/db.DatabaseService/DeleteBox": grpclib.const.Handler(
                self.__rpc_delete_box,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteBoxRequest,
                DeleteBoxResponse,
            ),
            "/db.DatabaseService/GetBoxesInCategory": grpclib.const.Handler(
                self.__rpc_get_boxes_in_category,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBoxesInCategoryRequest,
                GetBoxesResponse,
            ),
            "/db.DatabaseService/GetBoxesInTimeRange": grpclib.const.Handler(
                self.__rpc_get_boxes_in_time_range,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBoxesInTimeRangeRequest,
                GetBoxesResponse,
            ),
        }
